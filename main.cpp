#include <iostream>
#ifdef __linux__
#include <SDL2/SDL.h>
#include <SDL2/SDL2_gfxPrimitives.h>
#endif
#ifdef __APPLE__
#include <SDL.h>
#include <SDL2_gfxPrimitives.h>
#endif
#include <cmath>
#include "utils.h"
#include "rays.h"

const float MAXDIST = hypot(MAPW, MAPH) * 0.9;
// 0 = empty; 4 bits to determine the texture of each face
Uint16 tiles[MAPW][MAPH] = {
	0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 
	0x1234, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1234, 
	0x1234, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1234, 
	0x1234, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1234, 
	0x1234, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1234, 
	0x1234, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1234, 
	0x1234, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1234, 
	0x1234, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1234, 
	0x1234, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1234, 
	0x1234, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1234, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1234, 
	0x1234, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1234, 
	0x1234, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1234, 
	0x1234, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1234, 
	0x1234, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1234, 
	0x1234, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1234, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1234, 
	0x1234, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1234, 
	0x1234, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1234, 
	0x1234, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1234, 0x0000, 0x0000, 0x0000, 0x1234, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1234, 
	0x1234, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1234, 
	0x1234, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1234, 
	0x1234, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1234, 
	0x1234, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1234, 
	0x1234, 0x0000, 0x0000, 0x0000, 0x0000, 0x1234, 0x1234, 0x1234, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1234, 
	0x1234, 0x0000, 0x1234, 0x0000, 0x0000, 0x0000, 0x0000, 0x1234, 0x0000, 0x0000, 0x0000, 0x1234, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1234, 
	0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 0x1234, 
};
SDL_Texture* textures[15];
SDL_Texture* floortex;
SDL_Texture* ceiltex;
float fov = (M_PI / 2) / 2;

int filter(void* arg, SDL_Event* e) { return e->type == SDL_QUIT; }

int main(int argc, char* argv[])
{
	SDL_Window*   window;
	SDL_Renderer* renderer;
	if (init(&window, &renderer)) return 1;
	SDL_SetEventFilter(filter, NULL);
	loadtex(renderer, textures, floortex, ceiltex);
	Vec2d<float> pos = { MAPW / 2.f, MAPH / 2.f, -1};
	float heading = 0;
	Vec2d<float> fieldleft, fieldright;
	Uint32 lasttick = SDL_GetTicks();
	const Uint8* kb = SDL_GetKeyboardState(NULL);
	for (SDL_Event e; e.type != SDL_QUIT; SDL_PollEvent(&e))
	{
		// update player
		{
			float tdiff = (SDL_GetTicks() - lasttick) / 500.f;
			lasttick = SDL_GetTicks();
			int multiplier = (kb[SDL_SCANCODE_W] - kb[SDL_SCANCODE_S]) * 2;
			Vec2d<float> last = pos;
			pos.x += multiplier * tdiff * cos(heading);
			if (tiles[(int) pos.y][(int) pos.x]) pos.x = last.x;
			pos.y += multiplier * tdiff * sin(heading);
			if (tiles[(int) pos.y][(int) pos.x]) pos.y = last.y;
			heading += (kb[SDL_SCANCODE_D] - kb[SDL_SCANCODE_A]) * tdiff;
			fieldleft  = { cos(heading - fov), sin(heading - fov), 1 };
			fieldright = { cos(heading + fov), sin(heading + fov), 1 };
		}
		// render
		// ceiling and floor
		Uint32 start = SDL_GetTicks();
		{
			SDL_Rect src, r;
			src.w = src.h = r.w = r.h = 1;
			for (r.y = HEIGHT / 2; r.y < HEIGHT; r.y++)
			{
				// distance to floor horizontally
				float dist = HEIGHT / (SQRT_2 * (r.y - HEIGHT / 2));
				Vec2d<float> step = {
					dist / WIDTH * (fieldright.x - fieldleft.x),
					dist / WIDTH * (fieldright.y - fieldleft.y),
					-1
				};
				// get map coords
				Vec2d<float> mappos = {
					pos.x + dist * fieldleft.x,
					pos.y + dist * fieldleft.y,
					-1
				};
				Uint8 v = 0xff - 0xef * (dist / MAXDIST);
				SDL_SetTextureColorMod(floortex, v, v, v);
				SDL_SetTextureColorMod(ceiltex,  v, v, v);
				for (r.x = 0; r.x < WIDTH; r.x++)
				{
					src.x = (int) ((mappos.x - (int) mappos.x) * TEXSIZE) & TEXSIZE - 1;
					src.y = (int) ((mappos.y - (int) mappos.y) * TEXSIZE) & TEXSIZE - 1;
					SDL_RenderCopy(renderer, floortex, &src, &r);
					r.y = HEIGHT - r.y;
					SDL_RenderCopy(renderer, ceiltex, &src, &r);
					r.y = HEIGHT - r.y;
					mappos.x += step.x; mappos.y += step.y;
				}
			}
		}
		std::cout << "A: " << SDL_GetTicks() - start << std::endl;
		// walls
		start = SDL_GetTicks();
		{
			Vec2d<float> vel = fieldleft;
			Vec2d<float> step = {
				(fieldright.x - vel.x) / WIDTH,
				(fieldright.y - vel.y) / WIDTH,
				1
			};
			SDL_Rect src = { 0, 0, 1, TEXSIZE };
			for (int i = 0; i < WIDTH; i++)
			{
				vel.x += step.x; vel.y += step.y; MAG(vel);
				int side; Vec2d<int> tile;
				Vec2d<float> d = raycast(pos, vel, tiles, side, tile);
				d.mag *= cos(heading - atan2(vel.y, vel.x));
				float h = HEIGHT / d.mag;
				h *= (h >= 0);
				SDL_Rect r = { i, (int) ((HEIGHT - h) / 2), 1, (int) h };
				SDL_Texture* t = textures[
					(tiles[tile.y][tile.x] >> side * 4 & 0xf) - 1
				];
				Uint8 v = 0xff - 0xef * (d.mag / MAXDIST);
				SDL_SetTextureColorMod(t, v, v, v);
				src.x = ((side % 2) ? pos.x + d.x - tile.x : pos.y + d.y - tile.y) * TEXSIZE;
				SDL_RenderCopy(renderer, t, &src, &r);
			}
		}
		std::cout << "B: " << SDL_GetTicks() - start << std::endl;
		start = SDL_GetTicks();
		SDL_RenderPresent(renderer);
		std::cout << "C: " << SDL_GetTicks() - start << std::endl;
	}
	quit(textures, floortex, ceiltex, window, renderer);
	return 0;
}
